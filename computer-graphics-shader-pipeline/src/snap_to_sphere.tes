// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Replace with your code 

  // Gets world position of vertex
  vec4 intrp = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);

  // Normalize to sphere
  vec4 sphere_4 = vec4(normalize(intrp.xyz), 1.0);

  // Extract sphere coords
  sphere_fs_in = sphere_4.xyz;

  // Convert to view coords
  mat4 model_trans = model(is_moon, animation_seconds);
  view_pos_fs_in = view * model_trans * sphere_4;

  // Unit sphere pos is initially the normal, but we apply the proper transformation to get the transformed normal
  normal_fs_in = normalize((transpose(inverse(model_trans)) * vec4(sphere_4.xyz, 0.0)).xyz);

  pos_fs_in = proj * view_pos_fs_in;


  gl_Position = pos_fs_in;
  /////////////////////////////////////////////////////////////////////////////
}


